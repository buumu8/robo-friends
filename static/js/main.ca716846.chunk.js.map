{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/error-boundary/error-boundary.js","components/search-box/search-box.js","components/nav-bar/nav-bar.js","App.js","actions.js","constants.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","React","memo","_ref","robot","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","robots","loading","map","card_card","key","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","SearchBox","searchChange","htmlFor","type","placeholder","onChange","index_es","icon","faMagnifyingGlass","NavBar","connect","searchField","search","isPending","dispatch","setSearchField","event","payload","setRobots","asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","axios","get","sent","t0","console","log","stop","_x","apply","arguments","_props$searchField","useEffect","filteredRobots","filter","toLowerCase","includes","nav_bar_nav_bar","target","value","error_boundary","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","initialStateRobots","reducer","length","undefined","action","objectSpread","store","configureStore","middleware","getDefaultMiddleware","thunkMiddleware","logger","devTools","process","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","src_App"],"mappings":"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","file":"static/js/main.ca716846.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = React.memo(({ robot }) => {\r\n  return (\r\n    <section className=\"card\">\r\n      <figure>\r\n        <img src={`https://robohash.org/${robot.id}?200x200`} alt=\"robot\"></img>\r\n      </figure>\r\n      <h2>{robot.name}</h2>\r\n      <p>{robot.email}</p>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/card\";\r\nimport \"./card-list.css\";\r\n\r\nexport default function CardList({ robots, loading }) {\r\n  return (\r\n    <section className=\"card-list\">\r\n      {!loading ? (\r\n        robots.map((robot) => <Card robot={robot} key={robot.id}></Card>)\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    const { hasError } = this.state;\r\n\r\n    return hasError ? <h1>Oooops. Something went wrong.</h1> : this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport \"./search-box.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function SearchBox({ searchChange }) {\r\n  return (\r\n    <form>\r\n      <fieldset>\r\n        <label className=\"search-container\" htmlFor=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-box\"\r\n            id=\"search-box\"\r\n            placeholder=\"search for robots\"\r\n            onChange={searchChange}\r\n          />\r\n          <FontAwesomeIcon className=\"search_icon\" icon={faMagnifyingGlass} />\r\n        </label>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchBox from \"../search-box/search-box\";\r\nimport \"./nav-bar.css\";\r\n\r\nconst NavBar = React.memo((props) => {\r\n  const { searchChange } = props;\r\n  return (\r\n    <nav>\r\n      <h1>Robo Friends</h1>\r\n      <SearchBox searchChange={searchChange} />\r\n    </nav>\r\n  );\r\n});\r\n\r\nexport default NavBar;\r\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport ErrorBoundary from \"./components/error-boundary/error-boundary\";\nimport NavBar from \"./components/nav-bar/nav-bar\";\nimport { setSearchField, requestRobots } from \"./actions\";\n\nfunction App(props) {\n  const { searchField = \"\", setSearchField, robots, setRobots, loading } = props;\n\n  useEffect(() => {\n    setRobots();\n  }, []);\n\n  const filteredRobots = robots.filter((robot) =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <NavBar searchChange={(event) => setSearchField(event.target.value)} />\n      <main>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} loading={loading} />\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.search.searchField,\n  robots: state.robots.robots,\n  loading: state.robots.isPending,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setSearchField: (event) => dispatch(setSearchField(event)),\n  setRobots: () => dispatch(requestRobots()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from \"axios\";\r\n\r\nimport { CHANGE_SEARCH_FIELD, FETCH_REQUEST, FETCH_SUCCESS, FETCH_FAIL } from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => async (dispatch) => {\r\n  dispatch({ type: FETCH_REQUEST });\r\n  try {\r\n    const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = response.data;\r\n    dispatch({ type: FETCH_SUCCESS, payload: data });\r\n  } catch (err) {\r\n    console.log(err);\r\n    dispatch({ type: FETCH_FAIL, payload: err });\r\n  }\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCHFIELD\";\r\nexport const FETCH_REQUEST = \"FETCH_REQUEST\";\r\nexport const FETCH_SUCCESS = \"FETCH_SUCCESS\";\r\nexport const FETCH_FAIL = \"FETCH_FAIL\";\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD, FETCH_REQUEST, FETCH_SUCCESS, FETCH_FAIL } from \"./constants\";\r\n\r\nconst initialState = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case FETCH_REQUEST:\r\n      return { ...state, isPending: true };\r\n    case FETCH_SUCCESS:\r\n      return { ...state, isPending: false, robots: action.payload };\r\n    case FETCH_FAIL:\r\n      return { ...state, isPending: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst reducer = {\n  search: searchRobots,\n  robots: requestRobots,\n};\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunkMiddleware, logger),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}